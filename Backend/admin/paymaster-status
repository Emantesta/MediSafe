const express = require('express');
const router = express.Router();
const FundingHistory = require('../models/FundingHistory');
const AuditLog = require('../models/AuditLog');
const { ethers } = require('ethers');
const { authMiddleware } = require('./utils');

module.exports = (wallet, contract, provider, logger, redisClient) => {
  router.get('/paymaster-status', authMiddleware, async (req, res) => {
    if (!req.user.isAdmin) return res.status(403).json({ error: 'Admin access required' });

    const cacheKey = 'paymaster_status';
    try {
      // Check Redis cache
      const cached = await redisClient.get(cacheKey);
      if (cached) {
        logger.info('Cache hit for paymaster status');
        return res.json(JSON.parse(cached));
      }

      // Fetch current paymaster and balance
      const paymasterAddress = config.blockchain.paymasterAddress; // Or await contract.paymaster() if dynamic
      const paymasterContract = new ethers.Contract(paymasterAddress, ['function getBalance() view returns (uint256)'], provider);
      const balance = ethers.utils.formatEther(await paymasterContract.getBalance());

      // Fetch trusted paymasters (assumes contract function exists)
      const trustedPaymasters = await contract.trustedPaymasters().catch(() => [paymasterAddress]); // Fallback to current if not implemented

      // Fetch funding history
      const fundingHistory = await FundingHistory.find().sort({ timestamp: -1 }).limit(50);

      const response = {
        paymaster: { address: paymasterAddress, balance },
        trustedPaymasters,
        fundingHistory,
      };

      // Cache for 1 minute
      await redisClient.setEx(cacheKey, 60, JSON.stringify(response));
      res.json(response);
    } catch (error) {
      logger.error('Paymaster status fetch error:', error);
      res.status(500).json({ error: 'Failed to fetch paymaster status' });
    }
  });

  // Action: Add Funds
  router.post('/paymaster/fund', authMiddleware, async (req, res) => {
    if (!req.user.isAdmin || req.user.role !== 'super_admin') return res.status(403).json({ error: 'Super admin access required' });
    const { amount } = req.body; // Amount in ETH

    try {
      const tx = await wallet.sendTransaction({
        to: config.blockchain.paymasterAddress,
        value: ethers.utils.parseEther(amount),
      });
      const receipt = await tx.wait();

      await new FundingHistory({
        txHash: receipt.transactionHash,
        amount: ethers.utils.parseEther(amount).toString(),
        type: 'deposit',
        adminAddress: req.user.address,
      }).save();

      await new AuditLog({
        adminAddress: req.user.address,
        action: 'fund_paymaster',
        details: `Added ${amount} ETH to paymaster, txHash: ${receipt.transactionHash}`,
      }).save();

      // Invalidate cache
      await redisClient.del('paymaster_status');
      wss.clients.forEach(client => client.send(JSON.stringify({ type: 'paymasterUpdate', data: { balance: amount } })));

      res.json({ txHash: receipt.transactionHash });
    } catch (error) {
      logger.error('Fund paymaster error:', error);
      res.status(500).json({ error: 'Funding failed' });
    }
  });

  // Action: Update Trusted Paymasters (assuming contract function exists)
  router.post('/paymaster/trusted', authMiddleware, async (req, res) => {
    if (!req.user.isAdmin || req.user.role !== 'super_admin') return res.status(403).json({ error: 'Super admin access required' });
    const { action, address } = req.body; // action: 'add' or 'remove'

    try {
      let callData;
      if (action === 'add') callData = contract.interface.encodeFunctionData('addTrustedPaymaster', [address]);
      else if (action === 'remove') callData = contract.interface.encodeFunctionData('removeTrustedPaymaster', [address]);
      else return res.status(400).json({ error: 'Invalid action' });

      const userOp = {
        sender: wallet.address,
        nonce: await contract.nonces(wallet.address),
        callData,
        callGasLimit: 200000,
        verificationGasLimit: 100000,
        preVerificationGas: 21000,
        maxFeePerGas: ethers.utils.parseUnits('10', 'gwei').toString(),
        maxPriorityFeePerGas: ethers.utils.parseUnits('1', 'gwei').toString(),
        paymasterAndData: config.blockchain.paymasterAddress + '00',
        signature: '0x', // Dummy; sign properly in production
      };
      const txHash = await submitUserOperation(userOp, contract, provider, logger);

      await new AuditLog({
        adminAddress: req.user.address,
        action: `${action}_trusted_paymaster`,
        details: `${action === 'add' ? 'Added' : 'Removed'} ${address} as trusted paymaster, txHash: ${txHash}`,
      }).save();

      await redisClient.del('paymaster_status');
      res.json({ txHash });
    } catch (error) {
      logger.error('Update trusted paymasters error:', error);
      res.status(500).json({ error: 'Update failed' });
    }
  });

  return router;
};
