import React, { useState, useEffect, useRef } from 'react';
import { Formik, Form, Field, ErrorMessage } from 'formik';
import * as Yup from 'yup';
import axios from 'axios';
import { toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import Web3 from 'web3';
import QRCode from 'react-qr-code';
import { ethers } from 'ethers';

// Contract ABI definition
const contractABI = [
  {
    "name": "bookAppointment",
    "type": "function",
    "inputs": [
      { "name": "doctorAddress", "type": "address" },
      { "name": "timestamp", "type": "uint256" },
      { "name": "paymentType", "type": "uint8" },
      { "name": "isVideoCall", "type": "bool" },
      { "name": "videoCallLink", "type": "string" }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  }
];

// Function to pack User Operation according to ERC-4337
function packUserOp(userOp) {
  const types = [
    'address', 'uint256', 'bytes', 'uint256', 'uint256',
    'uint256', 'uint256', 'uint256', 'bytes'
  ];
  const values = [
    userOp.sender,
    userOp.nonce,
    userOp.callData,
    userOp.callGasLimit,
    userOp.verificationGasLimit,
    userOp.preVerificationGas,
    userOp.maxFeePerGas,
    userOp.maxPriorityFeePerGas,
    userOp.paymasterAndData
  ];
  return ethers.utils.defaultAbiCoder.encode(types, values);
}

const App = ({ account, signer, token }) => {
  const [role, setRole] = useState('patient');
  const [appointments, setAppointments] = useState([]);
  const [labTests, setLabTests] = useState([]);
  const [prescriptions, setPrescriptions] = useState([]);
  const [aiAnalyses, setAIAnalyses] = useState([]);
  const [dataStatus, setDataStatus] = useState({ dataSharing: false, lastRewardTimestamp: 0 });
  const [paymasterStatus, setPaymasterStatus] = useState(null);
  const ws = useRef(null);
  const web3 = new Web3(process.env.REACT_APP_SONIC_RPC_URL);

  // Validation schemas
  const appointmentSchema = Yup.object({
    doctorAddress: Yup.string().matches(/^0x[a-fA-F0-9]{40}$/, 'Invalid address').required(),
    timestamp: Yup.number().min(Math.floor(Date.now() / 1000) + 900).required(),
    paymentType: Yup.number().min(0).max(2).required(),
    isVideoCall: Yup.boolean(),
    videoCallLink: Yup.string().when('isVideoCall', { is: true, then: Yup.string().required() })
  });

  const aiSchema = Yup.object({
    symptoms: Yup.string().required('Symptoms required')
  });

  const labTestSchema = Yup.object({
    patientAddress: Yup.string().matches(/^0x[a-fA-F0-9]{40}$/, 'Invalid address').required(),
    testType: Yup.string().required()
  });

  useEffect(() => {
    ws.current = new WebSocket('wss://localhost:8080');
    ws.current.onopen = () => toast.info('Connected to server');
    ws.current.onmessage = (e) => {
      const data = JSON.parse(e.data);
      if (data.type === 'appointmentUpdate') setAppointments(data.data);
    };
    fetchData();
    fetchDataStatus();
    fetchPaymasterStatus();
    return () => ws.current.close();
  }, []);

  // Data fetching functions
  const fetchData = async () => {
    try {
      const [aptRes, labRes, presRes, aiRes] = await Promise.all([
        axios.get(`${process.env.REACT_APP_API_URL}/appointments/${account}`, { headers: { Authorization: `Bearer ${token}` } }),
        axios.get(`${process.env.REACT_APP_API_URL}/lab-test/1`, { headers: { Authorization: `Bearer ${token}` } }),
        axios.get(`${process.env.REACT_APP_API_URL}/prescription/1`, { headers: { Authorization: `Bearer ${token}` } }),
        axios.get(`${process.env.REACT_APP_API_URL}/ai-analysis/1`, { headers: { Authorization: `Bearer ${token}` } })
      ]);
      setAppointments(aptRes.data.appointments);
      setLabTests([labRes.data.labTest]);
      setPrescriptions([presRes.data.prescription]);
      setAIAnalyses([aiRes.data.analysis]);
    } catch (error) {
      toast.error('Failed to fetch data');
    }
  };

  const fetchDataStatus = async () => {
    try {
      const { data } = await axios.get(`${process.env.REACT_APP_API_URL}/data-status/${account}`, { headers: { Authorization: `Bearer ${token}` } });
      setDataStatus(data);
    } catch (error) {
      toast.error('Failed to fetch data status');
    }
  };

  const fetchPaymasterStatus = async () => {
    try {
      const { data } = await axios.get(`${process.env.REACT_APP_API_URL}/paymaster-status`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      setPaymasterStatus(data);
    } catch (error) {
      toast.error('Failed to fetch paymaster status');
    }
  };

  // Appointment booking with User Operation
  const bookAppointmentWithUserOp = async (values) => {
    try {
      const callData = new ethers.utils.Interface(contractABI).encodeFunctionData('bookAppointment', [
        values.doctorAddress,
        values.timestamp,
        values.paymentType,
        values.isVideoCall,
        values.videoCallLink || ""
      ]);

      const userOp = {
        sender: account,
        nonce: await web3.eth.getTransactionCount(account),
        callData,
        callGasLimit: 200000,
        verificationGasLimit: 100000,
        preVerificationGas: 21000,
        maxFeePerGas: ethers.utils.parseUnits('10', 'gwei'),
        maxPriorityFeePerGas: ethers.utils.parseUnits('1', 'gwei'),
        paymasterAndData: paymasterStatus?.paymaster || '0x'
      };

      const userOpHash = ethers.utils.keccak256(packUserOp(userOp));
      const signature = await signer.signMessage(ethers.utils.arrayify(userOpHash));
      
      const { data } = await axios.post(`${process.env.REACT_APP_API_URL}/book-appointment`, {
        ...values,
        userOp: { ...userOp, signature }
      }, { headers: { Authorization: `Bearer ${token}` } });

      toast.success('Appointment booked with UserOp');
      fetchData();
    } catch (error) {
      toast.error(`Failed to book with UserOp: ${error.message}`);
      console.error(error);
    }
  };

  // Other API interaction functions
  const confirmAppointment = async (appointmentId) => {
    try {
      const signature = await signer.signMessage('Confirm Appointment');
      await axios.post(`${process.env.REACT_APP_API_URL}/confirm-appointment`, 
        { appointmentId, signature }, 
        { headers: { Authorization: `Bearer ${token}` } }
      );
      toast.success('Appointment confirmed');
      fetchData();
    } catch (error) {
      toast.error('Failed to confirm appointment');
    }
  };

  const analyzeSymptoms = async (values) => {
    try {
      const signature = await signer.signMessage('Analyze Symptoms');
      await axios.post(`${process.env.REACT_APP_API_URL}/analyze-symptoms`, 
        { ...values, signature }, 
        { headers: { Authorization: `Bearer ${token}` } }
      );
      toast.success('AI analysis requested');
      fetchData();
    } catch (error) {
      toast.error('Failed to analyze symptoms');
    }
  };

  const toggleDataMonetization = async (enable) => {
    try {
      const signature = await signer.signMessage('Toggle Data Monetization');
      await axios.post(`${process.env.REACT_APP_API_URL}/toggle-data-monetization`, 
        { enable, signature }, 
        { headers: { Authorization: `Bearer ${token}` } }
      );
      toast.success(`Data monetization ${enable ? 'enabled' : 'disabled'}`);
      fetchDataStatus();
    } catch (error) {
      toast.error('Failed to toggle data monetization');
    }
  };

  const claimDataReward = async () => {
    try {
      const signature = await signer.signMessage('Claim Data Reward');
      await axios.post(`${process.env.REACT_APP_API_URL}/claim-data-reward`, 
        { signature }, 
        { headers: { Authorization: `Bearer ${token}` } }
      );
      toast.success('Data reward claimed');
      fetchDataStatus();
    } catch (error) {
      toast.error('Failed to claim data reward');
    }
  };

  const reviewAIAnalysis = async (aiAnalysisId, analysisIpfsHash) => {
    try {
      const signature = await signer.signMessage('Review AI Analysis');
      await axios.post(`${process.env.REACT_APP_API_URL}/review-ai-analysis`, 
        { aiAnalysisId, analysisIpfsHash, signature }, 
        { headers: { Authorization: `Bearer ${token}` } }
      );
      toast.success('AI analysis reviewed');
      fetchData();
    } catch (error) {
      toast.error('Failed to review AI analysis');
    }
  };

  const orderLabTest = async (values) => {
    try {
      const signature = await signer.signMessage('Order Lab Test');
      await axios.post(`${process.env.REACT_APP_API_URL}/order-lab-test`, 
        { ...values, signature }, 
        { headers: { Authorization: `Bearer ${token}` } }
      );
      toast.success('Lab test ordered');
      fetchData();
    } catch (error) {
      toast.error('Failed to order lab test');
    }
  };

  const collectSample = async (labTestId, ipfsHash) => {
    try {
      const signature = await signer.signMessage('Collect Sample');
      await axios.post(`${process.env.REACT_APP_API_URL}/collect-sample`, 
        { labTestId, ipfsHash, signature }, 
        { headers: { Authorization: `Bearer ${token}` } }
      );
      toast.success('Sample collected');
      fetchData();
    } catch (error) {
      toast.error('Failed to collect sample');
    }
  };

  const uploadLabResults = async (labTestId, resultsIpfsHash) => {
    try {
      const signature = await signer.signMessage('Upload Lab Results');
      await axios.post(`${process.env.REACT_APP_API_URL}/upload-lab-results`, 
        { labTestId, resultsIpfsHash, signature }, 
        { headers: { Authorization: `Bearer ${token}` } }
      );
      toast.success('Results uploaded');
      fetchData();
    } catch (error) {
      toast.error('Failed to upload lab results');
    }
  };

  const reviewLabResults = async (labTestId, medicationDetails, prescriptionIpfsHash) => {
    try {
      const signature = await signer.signMessage('Review Lab Results');
      await axios.post(`${process.env.REACT_APP_API_URL}/review-lab-results`, 
        { labTestId, medicationDetails, prescriptionIpfsHash, signature }, 
        { headers: { Authorization: `Bearer ${token}` } }
      );
      toast.success('Results reviewed');
      fetchData();
    } catch (error) {
      toast.error('Failed to review lab results');
    }
  };

  const verifyPrescription = async (prescriptionId, verificationCodeHash) => {
    try {
      const signature = await signer.signMessage('Verify Prescription');
      await axios.post(`${process.env.REACT_APP_API_URL}/verify-prescription`, 
        { prescriptionId, verificationCodeHash, signature }, 
        { headers: { Authorization: `Bearer ${token}` } }
      );
      toast.success('Prescription verified');
      fetchData();
    } catch (error) {
      toast.error('Failed to verify prescription');
    }
  };

  const fulfillPrescription = async (prescriptionId) => {
    try {
      const signature = await signer.signMessage('Fulfill Prescription');
      await axios.post(`${process.env.REACT_APP_API_URL}/fulfill-prescription`, 
        { prescriptionId, signature }, 
        { headers: { Authorization: `Bearer ${token}` } }
      );
      toast.success('Prescription fulfilled');
      fetchData();
    } catch (error) {
      toast.error('Failed to fulfill prescription');
    }
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl mb-4">Telemedicine System</h1>
      <select onChange={(e) => setRole(e.target.value)} className="mb-4 p-2 border">
        <option value="patient">Patient</option>
        <option value="doctor">Doctor</option>
        <option value="labTech">Lab Technician</option>
        <option value="pharmacy">Pharmacy</option>
      </select>

      {role === 'patient' && (
        <>
          <div className="mt-4">
            <h2>Paymaster Status</h2>
            <p>Address: {paymasterStatus?.paymaster || 'Not available'}</p>
            <p>Trusted: {paymasterStatus?.isTrusted ? 'Yes' : 'No'}</p>
          </div>
          <Formik 
            initialValues={{ doctorAddress: '', timestamp: '', paymentType: 0, isVideoCall: false, videoCallLink: '' }} 
            validationSchema={appointmentSchema} 
            onSubmit={bookAppointmentWithUserOp}
          >
            {({ isSubmitting, values }) => (
              <Form className="space-y-4">
                <div>
                  <Field name="doctorAddress" placeholder="Doctor Address" className="w-full p-2 border" />
                  <ErrorMessage name="doctorAddress" component="div" className="text-red-500" />
                </div>
                <div>
                  <Field name="timestamp" type="number" placeholder="Timestamp" className="w-full p-2 border" />
                  <ErrorMessage name="timestamp" component="div" className="text-red-500" />
                </div>
                <div>
                  <Field name="paymentType" as="select" className="w-full p-2 border">
                    <option value={0}>ETH</option>
                    <option value={1}>USDC</option>
                    <option value={2}>SONIC</option>
                  </Field>
                </div>
                <div>
                  <Field name="isVideoCall" type="checkbox" />
                  <label>Video Call</label>
                </div>
                {values.isVideoCall && (
                  <div>
                    <Field name="videoCallLink" placeholder="Video Call Link" className="w-full p-2 border" />
                    <ErrorMessage name="videoCallLink" component="div" className="text-red-500" />
                  </div>
                )}
                <button type="submit" disabled={isSubmitting} className="bg-blue-500 text-white p-2 rounded">
                  Book Appointment
                </button>
              </Form>
            )}
          </Formik>
          <Formik initialValues={{ symptoms: '' }} validationSchema={aiSchema} onSubmit={analyzeSymptoms}>
            {({ isSubmitting }) => (
              <Form className="space-y-4 mt-4">
                <div>
                  <Field name="symptoms" placeholder="Symptoms" className="w-full p-2 border" />
                  <ErrorMessage name="symptoms" component="div" className="text-red-500" />
                </div>
                <button type="submit" disabled={isSubmitting} className="bg-green-500 text-white p-2 rounded">
                  Analyze Symptoms
                </button>
              </Form>
            )}
          </Formik>
          <div className="mt-4">
            <h2 className="text-xl">Data Monetization</h2>
            <p>Data Sharing: {dataStatus.dataSharing ? 'Enabled' : 'Disabled'}</p>
            <p>Last Reward: {new Date(dataStatus.lastRewardTimestamp * 1000).toLocaleString()}</p>
            <button 
              onClick={() => toggleDataMonetization(!dataStatus.dataSharing)} 
              className="bg-yellow-500 text-white p-2 rounded mt-2"
            >
              {dataStatus.dataSharing ? 'Disable' : 'Enable'} Data Sharing
            </button>
            <button 
              onClick={claimDataReward} 
              className="bg-green-500 text-white p-2 rounded mt-2 ml-2"
            >
              Claim Reward
            </button>
          </div>
        </>
      )}

      {role === 'doctor' && (
        <>
          <Formik initialValues={{ patientAddress: '', testType: '' }} validationSchema={labTestSchema} onSubmit={orderLabTest}>
            {({ isSubmitting }) => (
              <Form className="space-y-4">
                <div>
                  <Field name="patientAddress" placeholder="Patient Address" className="w-full p-2 border" />
                  <ErrorMessage name="patientAddress" component="div" className="text-red-500" />
                </div>
                <div>
                  <Field name="testType" placeholder="Test Type" className="w-full p-2 border" />
                  <ErrorMessage name="testType" component="div" className="text-red-500" />
                </div>
                <button type="submit" disabled={isSubmitting} className="bg-blue-500 text-white p-2 rounded">
                  Order Lab Test
                </button>
              </Form>
            )}
          </Formik>
          {appointments.map(apt => (
            <div key={apt[0]} className="p-4 border mt-2">
              <p>ID: {apt[0]}</p>
              <p>Status: {['Pending', 'Confirmed', 'Completed', 'Cancelled', 'Emergency'][apt[4]]}</p>
              {apt[7] && <a href={apt[7]} target="_blank" rel="noopener noreferrer" className="text-blue-500">Join Video Call</a>}
              {apt[4] === 0 && (
                <button 
                  onClick={() => confirmAppointment(apt[0])} 
                  className="bg-green-500 text-white p-2 rounded mt-2"
                >
                  Confirm
                </button>
              )}
            </div>
          ))}
          {aiAnalyses.map(ai => !ai[4] && (
            <div key={ai[0]} className="p-4 border mt-2">
              <p>ID: {ai[0]}</p>
              <p>Symptoms: {ai[2]}</p>
              <button 
                onClick={() => reviewAIAnalysis(ai[0], 'ipfs-hash')} 
                className="bg-yellow-500 text-white p-2 rounded"
              >
                Review AI Analysis
              </button>
            </div>
          ))}
          {labTests.map(test => test[4] === 2 && (
            <div key={test[0]} className="p-4 border mt-2">
              <p>ID: {test[0]}</p>
              <button 
                onClick={() => reviewLabResults(test[0], 'Medication Details', 'prescription-ipfs-hash')} 
                className="bg-blue-500 text-white p-2 rounded"
              >
                Review Results
              </button>
            </div>
          ))}
        </>
      )}

      {role === 'labTech' && labTests.map(test => (
        <div key={test[0]} className="p-4 border mt-2">
          <p>ID: {test[0]}</p>
          <p>Status: {['Requested', 'Collected', 'ResultsUploaded', 'Reviewed'][test[4]]}</p>
          {test[4] === 0 && (
            <button 
              onClick={() => collectSample(test[0], 'ipfs-hash')} 
              className="bg-green-500 text-white p-2 rounded"
            >
              Collect Sample
            </button>
          )}
          {test[4] === 1 && (
            <button 
              onClick={() => uploadLabResults(test[0], 'results-ipfs-hash')} 
              className="bg-green-500 text-white p-2 rounded"
            >
              Upload Results
            </button>
          )}
        </div>
      ))}

      {role === 'pharmacy' && prescriptions.map(pres => (
        <div key={pres[0]} className="p-4 border mt-2">
          <p>ID: {pres[0]}</p>
          <p>Status: {['Generated', 'Verified', 'Fulfilled'][pres[6]]}</p>
          {pres[6] === 0 && (
            <>
              <QRCode value={JSON.stringify({ id: pres[0].toString(), verificationCodeHash: ethers.utils.hexlify(pres[3]) })} />
              <button 
                onClick={() => verifyPrescription(pres[0], pres[3])} 
                className="bg-yellow-500 text-white p-2 rounded mt-2"
              >
                Verify
              </button>
            </>
          )}
          {pres[6] === 1 && (
            <button 
              onClick={() => fulfillPrescription(pres[0])} 
              className="bg-green-500 text-white p-2 rounded"
            >
              Fulfill
            </button>
          )}
        </div>
      ))}
    </div>
  );
};

export default App;
